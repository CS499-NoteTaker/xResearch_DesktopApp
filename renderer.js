// This file is required by the index.html file and will
// be executed in the renderer process for that window.
// No Node.js APIs are available in this process because
// `nodeIntegration` is turned off. Use `preload.js` to
// selectively enable features needed in the rendering
// process.
//IF NO INTERNET CONNECTION, THIS APP WILL NOT WORK, HANDLE THAT.
var selection;
var pageX;
var pageY;


var rcSelected = false;
var rcIndexSelected = 0;

var strResearchedCells = [];
arr = {
    "ht": [],
    "citationObjects": []
}
var main = function() {
    //adding context menu on right click for summarizing
    $(document).ready(function() {

        $(document).on('contextmenu', function(ev) {
            ev.preventDefault();
            var r = quill.getSelection();
            if (r.length > 0) {
                var selectedText = quill.getText(r.index, r.length);
                $('ul.tools').css({
                    'left': pageX,
                    'top': pageY - 20
                }).fadeIn(200);
            } else {
                $('ul.tools').fadeOut(200);
            }
        });

        $(document).on("click", function(e) {
            $('ul.tools').fadeOut(200);
        });

        $(document).on("mousedown", function(e) {
            pageX = e.pageX;
            pageY = e.pageY;
        });

        //prevent deselecting selected text while clicking on context menu
        $('.tools').on("mousedown", function(e) {
            e.preventDefault();
        });



    });

    let ConvertToHtmlButton = document.getElementById("KeepInArray");
    ConvertToHtmlButton.addEventListener("click", convertToHtml);

    let ConvertToPdfButton = document.getElementById("ConvertToPdfButton");
    ConvertToPdfButton.addEventListener("click", convertToPdf);


    let ResearchedCellItem = document.getElementById("ResearchedCellsList");
    ResearchedCellItem.addEventListener("click", LoadResearchedCell);

    let DeleteRcButton = document.getElementById("DeleteRc");
    DeleteRcButton.addEventListener("click", DeleteRc);

    let GenerateCitationButton = document.getElementById("generateCitationButton");
    GenerateCitationButton.addEventListener("click", GenerateCitation)

    let AddCitationButton = document.getElementById("addCitationButton");
    AddCitationButton.addEventListener("click", AddCitation)

    //POSTING summary
    //   document.addEventListener("click",function(){
    //     var settings = {
    //   "url": "https://api.meaningcloud.com/summarization-1.0?key=b04fb691028f9f684dc058c2a3dc31f6&txt=Interrupts are generated by hardwares, and they are passive means if there is any instruction running then interrupts will have to wait.Interrupts are hardwares, and It’s caused by external events. It will not repeat since it is caused by external events, and can be handled by jump statements. Interrupts are asynchronous events since they are caused by external events.Traps are softwares, and it’s caused by softwares like dividing by zeroes. It can be repeated according to the calling of instructions, and cannot be handled by jump statements. Traps are synchronous events.&sentences=1",
    //   "method": "POST",
    //   "timeout": 0,
    // };
    //
    // $.ajax(settings).done(function (response) {
    //   console.log(response);
    // });
    //   });

};

/**
 * Is a method when "Add Citation" button is clicked. Gets the appropriate
 * json Citation object and maps the object with some index that the user
 * chooses to map citation to paragraph/researched cell. Then pushes that
 * into arr (the research paper). 
 */
var AddCitation = function() {
    console.log("AddCitation method called.");

    var index = document.getElementById("itemNumber").value;
    var citation = getCitationAttributes();

    var citationObject = {
        "index": index,
        "citation": citation
    };

    arr.citationObjects.push(citationObject);
    console.log(JSON.stringify(arr));
}

/**
 * In this function, we return a citation object that extracts
 * values from the Citation form textboxes.
 * Maps them accordingly.
 */
function getCitationAttributes() {
    // Here, get all textboxes attributes and add them to a json object accordingly.
    var inputDate = document.getElementById("datePublished").value;
    var releasedDate = (new Date(inputDate)).toISOString();
    var accessDate = (new Date()).toISOString(); // just get today's date. "yyyy-MM-dd'T'HH:mm:ssZ"
    var pageTitle = document.getElementById("articleTitle").value;
    var namesTextField = document.getElementById("authors").value;
    var authorNames = namesTextField.split(";"); // Splits author names with delimeter of ';'
    var publisher = document.getElementById("publisher").value;
    var url = document.getElementById("url").value;
    var websiteTitle = document.getElementById("websiteTitle").value;

    var citation = {
        "releasedDate": releasedDate,
        "accessDate": accessDate,
        "pageTitle": pageTitle,
        "authorNames": authorNames,
        "publisher": publisher,
        "url": url,
        "websiteTitle": websiteTitle
    };

    return citation;
}

function setCitationAttributes(citation) {
    // Here, get all textboxes attributes and add them to a json object accordingly.
    var releasedDate = new Date(citation.releasedDate);
    document.getElementById("datePublished").value = releasedDate.getDate();
    document.getElementById("articleTitle").value = citation.pageTitle;

    var authorNamesString = "";
    if (citation.authorNames.length > 0) {
        //Post fence algorithm to concatenate author names
        authorNamesString = authorNamesString + citation.authorNames[0];
        for (let index = 1; index < citation.authorNames.length; index++) {
            const element = citation.authorNames[index];
            authorNamesString = authorNamesString + "; " + element;
        }
    }

    document.getElementById("authors").value = authorNamesString;
    document.getElementById("publisher").value = citation.publisher;
    document.getElementById("url").value = citation.url;
    document.getElementById("websiteTitle").value = citation.websiteTitle;

    console.log("setCitationAttr: websiteTitle = " + citation.websiteTitle);

    console.log("setCitationAttr: citation = " + citation);
    console.log("setCitationAttr: typeOf:citation = " + typeof citation);
}

var GenerateCitation = async function(e) {
    console.log("GenerateCitation method called.");
    // get the json object returned from method
    var url = document.getElementById("generateUrlCitation").value;
    var xhrResponse = await scrapeUrlRequest(url);

    xhrResponse.addEventListener("readystatechange", function(e) {
        //4 means response is ready!
        if (xhrResponse.readyState == 4 && xhrResponse.status == 200) {
            //blob object to store the response from the server.
            citation = JSON.parse(this.responseText);
            console.log("Response from EventListener: " + JSON.stringify(citation));

            setCitationAttributes(citation);

        }
    });

    // After getting the Json object from scraping url.
    // Populate every attribute/field of json object
    // back into the textfields of html accordingly.

}

var ViewCitation = function(e) {
    var citation = getCitationAttributes();

    //make ajax call to for "citation" var
    //wait for response to then print it out in the element.
}


// method should return a json object
function scrapeUrlRequest(url) {
    var urlData = { "url": url };
    var payload = JSON.stringify(urlData);

    var response;
    console.log("ScrapeUrl method called.");
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    //used onreadystatechange (yes) ||    onload(no)
    xhr.addEventListener("readystatechange", function(e) {
        //4 means response is ready!
        if (this.readyState === 4) {
            //blob object to store the response from the server.
            response = JSON.parse(this.responseText);
            console.log("Response from EventListener: " + JSON.stringify(response));
        }
    });

    xhr.open('POST', 'http://localhost:6968/document/scrapeurl', true); //open the request
    xhr.setRequestHeader('Content-Type', 'application/json'); //request body type
    /**
      Loading sign while progress
    **/
    xhr.onprogress = function(event) {
        event.loaded;
        event.total;
    };
    //xhr.responseType = 'json';

    //!! Must await this //
    xhr.send(payload);
    return xhr;
    //console.log("response after send(): " + JSON.stringify(response));

    //ajax.call(url);
    // Here should make ajax (https request) to the server
    // and gets a json object from the server
    // return json object
}




var DeleteRc = function(e) {
    arr.ht.splice(rcIndexSelected, 1);
    strResearchedCells.splice(rcIndexSelected, 1);
    rcSelected = false;
    quill.root.innerHTML = "";
    display_array();
}

var LoadResearchedCell = function(e) {
    var rcIndex = parseInt(e.target.id);

    if (rcSelected && rcIndexSelected == rcIndex) {
        rcSelected = false;
        quill.root.innerHTML = "";
    } else {
        console.log("LoadResearchedCell function clicked");
        if (e.target && e.target.matches("a")) {
            rcSelected = true;
            rcIndexSelected = rcIndex;

            console.log("Clicked: " + e.target.innerText);
            console.log("a.id: " + e.target.id);


            console.log(typeof rcIndex)
            var loadHtmlStr = arr.ht[rcIndex];


            quill.root.innerHTML = loadHtmlStr;
        }
    }
}



//summarize the selected text by the user
//Not gonna summarize codes
var summarizeWords = function() {
        var text = "";
        var indexArr = [];
        var arr = [];
        var words = "";
        //quill method that returns true or false whether the user has selected the text or not
        var start = 0; // start of the <p>
        var end = 0; // end of the </p>
        var quillHtml = String(quill.root.innerHTML); //to search from start to end in HTML
        //will have two pointers to detect start and end of paragraphs to summarize
        var temp = quillHtml; //temp variable to slice throught the html
        console.log(quillHtml);
        start = quillHtml.indexOf('<p>') + 3; //getting paragraph start index
        end = quillHtml.indexOf('</p>');
        var tempContainer = document.createElement('div')
        var tempQuill = new Quill(tempContainer);
        tempQuill.setContents(words);
        words = quillHtml.slice(start, end);
        console.log("THe word is", words);
        indexArr.push(start);


    }
    //can selected text to summarize

var summarizeWords2 = function() {
    var data = "";
    selection = quill.getSelection();
    console.log(selection);
    var selectedContent = quill.getContents(selection.index, selection.length);
    var tempContainer = document.createElement('div')
    var tempQuill = new Quill(tempContainer);
    tempQuill.setContents(selectedContent);
    console.log("SetCont is " + tempQuill.getText());
    data = "key=39707fcc6822fef005f8d53c236f3df4&sentence=" + tempQuill.getText();
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            quill.enable(true); //set quill back to edit
            quill.focus(); //back to focus
            document.getElementById("add").innerHTML = "Request Passed!";
            console.log("Done!");
            $('#loading-indicator').hide();


            quill.deleteText(selection.index, selection.length);
            quill.insertText(selection.index, this.responseText);
        } else if (this.readyState == 4 && this.status != 200) {
            $('#loading-indicator').hide();
            quill.enable(true);
            quill.focus();
            document.getElementById("add").innerHTML = "Request failed!";
        }

    }
    xhttp.open("POST", "http://eazymind.herokuapp.com/arabic_sum/eazysum", true);
    xhttp.setRequestHeader("Cache-Control", "no-cache, no-store, must-revalidate");
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.send(data);
    quill.enable(false); //set quill to be uneditable
    quill.blur(); //take out focus
    $('#loading-indicator').show(); //loading indicator



    // if(response.summary[0] == '\''){
    //
    //   response.summary = response.summary.slice(1,response.summary.length);
    // }
    // if( response.summary[response.summary.length-1] == '\''){
    //   response.summary = response.summary.slice(0,response.summary.length-1);
    // }
}

//will need to use part of this code to be able to convert to html for summarization
var convertToHtml = function(e) {
    //Gets the Delta object
    var delta = quill.getContents();
    var quillTextLength = quill.getLength();
    var researchedCellText = quill.getText(0, quillTextLength);
    console.log(researchedCellText);

    var quillHtml = String(quill.root.innerHTML);
    console.log(quillHtml);

    //document.getElementById("htmlTextBox").textContent = quillHtml;
    //after converting to html, put that html into the array.
    // While also preserving the regular text to display in the list.
    //strResearchedCells.push(quill.root.in);

    // If a research cell is selected then load the content
    // back at the same index of the array.
    if (rcSelected) {
        arr.ht[rcIndexSelected] = quillHtml;
        strResearchedCells[rcIndexSelected] = researchedCellText;
        rcSelected = false;
    } else {
        strResearchedCells.push(researchedCellText);
        arr.ht.push(quillHtml);
    }


    console.log(typeof strResearchedCells[0]);
    display_array();
    quill.deleteText(0, quill.getLength());
};

// When display array method is called, it will concatinate 
// a new html to add to the list and be able to display researched 
// cells that has been added to the list.
function display_array() {
    console.log(strResearchedCells);

    // Don't try to display array if there are not elements
    document.getElementById("ResearchedCellsList").innerHTML = "";

    if (arr.ht.length == 0) {
        document.getElementById("ResearchedCellsList").innerHTML = "";
    } else {
        for (var i = 0; i < strResearchedCells.length; i++) {
            var li = document.createElement('li');
            var a = document.createElement('a');
            var text = strResearchedCells[i].substring(0, 20);

            a.appendChild(document.createTextNode(text));
            a.id = i;
            li.appendChild(a);
            document.getElementById("ResearchedCellsList").appendChild(li);
            console.log(li);
        }
    }
}






//want to create new quillbox to write new thing every time.IMPORTANT
//The issue now is DONT DELETE THE ARRAY WHEN YOU CANCEL THE DOWNLOAD.
//WE DON'T WANNA SHOW THIS BUTTON UNTIL THE USER HAS PUSHED SOME CONTENT TO ARRAY VERY IMPORTNAT
var convertToPdf = function(e) {
    //  var htmlData = String(document.getElementById("htmlTextBox").textContent);
    //getting array of htmls as string
    if (arr.ht.length === 0) {
        arr.ht.push("");
    }

    // Flushes researched cells and empties array
    var htmlData = JSON.stringify(arr);
    arr.ht = [];
    strResearchedCells = [];
    display_array();

    console.log(htmlData)
        //adds html Data to json array object
        //using xhr
    var xhr = new XMLHttpRequest();
    xhr.withCredentials = true;
    //used onreadystatechange (yes) ||    onload(no)
    xhr.addEventListener("readystatechange", function(e) {
        //4 means response is ready!
        if (this.readyState === 4) {
            //blob object to store the response from the server.
            var blob = new Blob([this.response], { type: 'application/pdf' });
            var a = document.createElement("a");
            a.style = "display: none";
            document.body.appendChild(a);
            var url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = 'Note.pdf';
            //programmatically force click the url
            a.click();
            window.URL.revokeObjectURL(url)
        }
    });

    xhr.open('POST', 'http://localhost:6968/document/convert', true); //open the request
    xhr.setRequestHeader('Content-Type', 'application/json'); //request body type
    /**
      Loading sign while progress
    **/
    xhr.onprogress = function(event) {
        event.loaded;
        event.total;
    };
    xhr.responseType = 'blob';

    xhr.send(htmlData);

    /*
function display_array()
{
   var e = "<li/>";   
   for (var i=0; y<arr.ht.length; i++) {
     e += "Element " + i + " = " + array[i].substring(0, 10) + "<br/>";
   }

   document.getElementById("myUL").innerHTML = e;
}
*/

    //  console.log( htmlDataJson );

    /*
      function httpGetAsync(theUrl, callback) {
          var xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
                  callback(xmlHttp.responseText);
          }
          xmlHttp.open("GET", theUrl, true); // true for asynchronous
          xmlHttp.send(null);
      }
    */
};

//document.addEventListener("DOMContentLoaded", main);
main();